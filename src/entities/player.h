/**
 * @file player.h
 * @brief Header file for the player module.
 *
 * This module manages the player character, including its movement,
 * drawing, collision detection, and bullets.
 */

#ifndef PLAYER_H
#define PLAYER_H

#include <stdint.h>
#include <stdio.h>
#include "pico/stdlib.h"
#include "boundingBox.h"

/** @brief Max amount of bullets in game */
#define MAX_BULLETS 3
/** @brief Max amount of particles generated by the player */
#define MAX_PARTICLES 10

/**
 * @brief Structure to represent a ship's particle.
 */
typedef struct
{
    int x;    /**< X-coordinate of the particle. */
    int y;    /**< Y-coordinate of the particle. */
    int dx;   /**< X-direction of the particle. */
    int time; /**< Time alive for particle. */
} ShipParticle;

/**
 * @brief Structure to represent the Player.
 */
typedef struct
{
    BoundingBox box;                       /**< Bounding box for collision detection. */
    ShipParticle particles[MAX_PARTICLES]; /**< Array of particles */
} Player;

/**
 * @brief Structure for Bullet
 */
typedef struct
{
    BoundingBox box; /**< Bounding box for collision detection. */
    int dx;          /**< Velocity for axis x of the bullet. */
    int dy;          /**< Velocity for axis y of the bullet. */
    int active;      /**< Bullet if exist or not in game. */
} Bullet;

/**
 * @brief Initializes the Player in the center of the screen.
 * @param player Pointer to the Player structure.
 */
void initPlayer(Player *player);

/**
 * @brief Moves the Player based on input.
 * @param player Pointer to the Player structure.
 * @param deltaX Change in X position.
 * @param deltaY Change in Y position.
 */
void movePlayer(Player *player, int deltaX, int deltaY);

/**
 * @brief Draws the Player.
 * @param player Pointer to the Player structure.
 */
void drawPlayer(Player *player);

/**
 * @brief Checks for collisions between the Player and asteroids.
 * @return true if a collision occurs, false otherwise.
 */
bool checkPlayerCollision();

/**
 * @brief Initializes the Player's particles.
 * @param player Pointer to the Player structure.
 */
void initPlayerParticles(Player *player);

/**
 * @brief Initializes the bullets.
 */
void initBullets();

/**
 * @brief Updates the bullets.
 */
void updateBullets();

/**
 * @brief Draws the bullets.
 */
void drawBullets();

/**
 * @brief Makes the player shoot.
 * @param player Pointer to the Player structure.
 */
void shoot(Player *player);

/**
 * @brief Checks for collisions between the bullets and asteroids.
 * @return true if a collision occurs, false otherwise.
 */
bool checkBulletsCollisions();

/** @brief Global variable for the Player. */
extern Player player;
/** @brief Global array for the Bullets. */
extern Bullet bullets[MAX_BULLETS];
/** @brief Time of invulnerablity for player*/
extern int playerInvulnerableTimer;

#endif // PLAYER_H